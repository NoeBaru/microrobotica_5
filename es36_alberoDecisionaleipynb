{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1e10b548-0e6e-454c-b0a1-75261f9f1a94",
   "metadata": {},
   "source": [
    "# es36\n",
    "## Noemi Baruffolo 5^AROB\n",
    "### prestiti"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "206e0493-e4b1-48b1-b690-f0fabc463b42",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.preprocessing import  LabelEncoder\n",
    "from sklearn.tree import  DecisionTreeClassifier, plot_tree\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "65a3c18a-6fb5-4cdb-a2a1-c43df608fa98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Married</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Education</th>\n",
       "      <th>Self_Employed</th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "      <th>Property_Area</th>\n",
       "      <th>Loan_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LP001002</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>5849</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LP001003</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>4583</td>\n",
       "      <td>1508.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LP001005</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>LP001006</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>2583</td>\n",
       "      <td>2358.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>LP001008</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>6000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n",
       "0  LP001002   Male      No          0      Graduate            No   \n",
       "1  LP001003   Male     Yes          1      Graduate            No   \n",
       "2  LP001005   Male     Yes          0      Graduate           Yes   \n",
       "3  LP001006   Male     Yes          0  Not Graduate            No   \n",
       "4  LP001008   Male      No          0      Graduate            No   \n",
       "\n",
       "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
       "0             5849                0.0         NaN             360.0   \n",
       "1             4583             1508.0       128.0             360.0   \n",
       "2             3000                0.0        66.0             360.0   \n",
       "3             2583             2358.0       120.0             360.0   \n",
       "4             6000                0.0       141.0             360.0   \n",
       "\n",
       "   Credit_History Property_Area Loan_Status  \n",
       "0             1.0         Urban           Y  \n",
       "1             1.0         Rural           N  \n",
       "2             1.0         Urban           Y  \n",
       "3             1.0         Urban           Y  \n",
       "4             1.0         Urban           Y  "
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv(\"csv/loan_train.csv\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "cd18bf17-ff47-4bb1-85f4-8e9f748026b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Loan_ID', 'Gender', 'Married', 'Dependents', 'Education',\n",
       "       'Self_Employed', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount',\n",
       "       'Loan_Amount_Term', 'Credit_History', 'Property_Area', 'Loan_Status'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "f7852548-a5e4-4ffa-ac9d-130a80aed593",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = ['Gender', 'Married', 'Education', 'Self_Employed', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term', 'Credit_History', 'Property_Area']\n",
    "target = [\"Loan_Status\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "a7425e22-3210-4bc2-857f-937c294deae5",
   "metadata": {},
   "outputs": [],
   "source": [
    "features_Le = ['Gender', 'Married', 'Education', 'Self_Employed', 'Property_Area']\n",
    "labelEncoders = []\n",
    "for f in features_Le:\n",
    "    le = LabelEncoder()\n",
    "    data[f] = le.fit_transform(data[f])\n",
    "    labelEncoders.append(le)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "6f59354f-a7b7-49ac-ae57-e0e862435d8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Married</th>\n",
       "      <th>Education</th>\n",
       "      <th>Self_Employed</th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "      <th>Property_Area</th>\n",
       "      <th>Loan_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4583</td>\n",
       "      <td>1508.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2583</td>\n",
       "      <td>2358.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5417</td>\n",
       "      <td>4196.0</td>\n",
       "      <td>267.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Gender  Married  Education  Self_Employed  ApplicantIncome  \\\n",
       "1       1        1          0              0             4583   \n",
       "2       1        1          0              1             3000   \n",
       "3       1        1          1              0             2583   \n",
       "4       1        0          0              0             6000   \n",
       "5       1        1          0              1             5417   \n",
       "\n",
       "   CoapplicantIncome  LoanAmount  Loan_Amount_Term  Credit_History  \\\n",
       "1             1508.0       128.0             360.0             1.0   \n",
       "2                0.0        66.0             360.0             1.0   \n",
       "3             2358.0       120.0             360.0             1.0   \n",
       "4                0.0       141.0             360.0             1.0   \n",
       "5             4196.0       267.0             360.0             1.0   \n",
       "\n",
       "   Property_Area Loan_Status  \n",
       "1              0           N  \n",
       "2              2           Y  \n",
       "3              2           Y  \n",
       "4              2           Y  \n",
       "5              2           Y  "
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "useful_data = data[features+target].copy()\n",
    "useful_data.dropna(inplace = True)\n",
    "useful_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "60438dd7-abe7-45e2-95a6-1bfacfdbb9fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 529 entries, 1 to 613\n",
      "Data columns (total 11 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Gender             529 non-null    int32  \n",
      " 1   Married            529 non-null    int32  \n",
      " 2   Education          529 non-null    int32  \n",
      " 3   Self_Employed      529 non-null    int32  \n",
      " 4   ApplicantIncome    529 non-null    int64  \n",
      " 5   CoapplicantIncome  529 non-null    float64\n",
      " 6   LoanAmount         529 non-null    float64\n",
      " 7   Loan_Amount_Term   529 non-null    float64\n",
      " 8   Credit_History     529 non-null    float64\n",
      " 9   Property_Area      529 non-null    int32  \n",
      " 10  Loan_Status        529 non-null    object \n",
      "dtypes: float64(4), int32(5), int64(1), object(1)\n",
      "memory usage: 39.3+ KB\n"
     ]
    }
   ],
   "source": [
    "useful_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "95a15ab3-f967-4ce6-8487-b1a790da7606",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = useful_data[features].to_numpy()\n",
    "y = useful_data[target].to_numpy()\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8256d203-196b-4623-8b75-5b739e29fd24",
   "metadata": {},
   "source": [
    "**Alberi decisionali e random forest non richiedono dati normalizzati!**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "bd3cfe28-b58f-46c7-9451-fbf224338ec6",
   "metadata": {},
   "outputs": [],
   "source": [
    "score_training = []\n",
    "score_test = []\n",
    "max_depth = []\n",
    "\n",
    "for d in range (1, 20):\n",
    "    albero = DecisionTreeClassifier(max_depth = d)\n",
    "    albero.fit(X_train, y_train)\n",
    "    max_depth.append(d)\n",
    "    score_training.append(albero.score(X_train, y_train))\n",
    "    score_test.append(albero.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "0ac449fb-9272-46f9-98dc-b7762ed857d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax =plt.subplots(figsize = (4, 4))\n",
    "ax.plot(max_depth, score_training, label = \"Score di training\")\n",
    "ax.plot(max_depth, score_test, label = \"Score di test\")\n",
    "ax.set_xlabel(\"Profondità massima dell'albero\")\n",
    "ax.set_ylabel(\"Accuratezze\")\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "cc1095fd-a58c-4868-bd4d-044ea4795a36",
   "metadata": {},
   "outputs": [],
   "source": [
    "albero = DecisionTreeClassifier(max_depth = 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "6937aecc-9f04-48c4-b846-fa880251e239",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_depth=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;DecisionTreeClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=3)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier(max_depth=3)"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "albero.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "e57d5ef4-0d16-4ba1-aa3e-1aeb12602d71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize = (8, 4))\n",
    "plot_tree(albero, ax = ax, feature_names = features, class_names = albero.classes_)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e1fda96-eb72-4fcf-a990-6a42ebfa0100",
   "metadata": {},
   "source": [
    "Visto che fa overfitting noi addestriamo centinaia e migliaia di alberi, cambiando leggermente i campioni che passiamo ad ogni albero e le features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "bb1ded14-f25b-4008-b41c-b53c10b99282",
   "metadata": {},
   "outputs": [],
   "source": [
    "rf = RandomForestClassifier(max_depth = 3, n_estimators = 200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "fc226c48-8473-4815-a8e3-b1ce6ed6a824",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Utente\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:1474: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  return fit_method(estimator, *args, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-4 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-4 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-4 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-4 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-4 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(max_depth=3, n_estimators=200)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_depth=3, n_estimators=200)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(max_depth=3, n_estimators=200)"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "8d327849-2eb2-4ca5-a97d-4ac3b927009e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8171428571428572"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25c0743f-1158-4d39-b176-e3b0e1657565",
   "metadata": {},
   "source": [
    "Va trovata la max_depth più ottimale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "3d23ce4e-2d3b-40b1-b85f-de345ebde68a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.02234997, 0.01189884, 0.01685022, 0.00958381, 0.07392647,\n",
       "       0.09158001, 0.09565268, 0.0549558 , 0.55860684, 0.06459536])"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf.feature_importances_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "14c8d56d-9e23-4938-9b68-a3d9b06fc263",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "feature: importance\n",
      "\n",
      "Gender: 0.022\n",
      "Married: 0.012\n",
      "Education: 0.017\n",
      "Self_Employed: 0.010\n",
      "ApplicantIncome: 0.074\n",
      "CoapplicantIncome: 0.092\n",
      "LoanAmount: 0.096\n",
      "Loan_Amount_Term: 0.055\n",
      "Credit_History: 0.559\n",
      "Property_Area: 0.065\n"
     ]
    }
   ],
   "source": [
    "print(\"feature: importance\")\n",
    "print(\"\")\n",
    "for feature, importance in zip(features, rf.feature_importances_):\n",
    "    print(f\"{feature}: {importance:.3f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47f6f4d1-95d1-4b56-8062-24bf3dcc5632",
   "metadata": {},
   "source": [
    "## Esercizio 1\n",
    "Fare grafico per calcolare max_depth e n_estimators"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c2c4b39-8469-45be-b6c6-49686275fcb2",
   "metadata": {},
   "source": [
    "## Esercizio 2\n",
    "Addestrare un MLP usando soltanto le 3 feature più importanti.\n",
    "**NOTA**: occorre normalizzare:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "279911be-b1d1-4f2f-bb8c-4898c06f1908",
   "metadata": {},
   "source": [
    "### La verifica sarà su Alberi decisionali, MLP, RandomForest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ccda3b2-d8f9-4f7d-9589-bde7c20a06a4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
